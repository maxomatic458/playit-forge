

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        maven { url = 'https://plugins.gradle.org/m2/' }
        
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'

version = project.mod_version
group = project.maven_group

java {
    archivesBaseName = 'playit-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'official', version: '1.19'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'playit-forge'

            mods {
                playitforge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'playit-forge'

            mods {
                playitforge {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'playit-forge'

            mods {
                playitforge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'playitforge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                playitforge {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "playit-forge.refmap.json"

    config "playit-forge.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    gradlePluginPortal()
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.1.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    shade 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
    shade 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    shade 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
}



// Example for how to get properties into the manifest for reading at runtime.
jar {
    //archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "playitforge",
                //"Specification-Vendor": "playitforge authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "playitforge authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
